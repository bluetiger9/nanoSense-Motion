//-----------------------------------------------------------------------------
// Copyright (c) 2018 Semiconductor Components Industries LLC
// (d/b/a "ON Semiconductor").  All rights reserved.
// This software and/or documentation is licensed by ON Semiconductor under
// limited terms and conditions.  The terms and conditions pertaining to the
// software and/or documentation are available at
// http://www.onsemi.com/site/pdf/ONSEMI_T&C.pdf ("ON Semiconductor Standard
// Terms and Conditions of Sale, Section 8 Software") and if applicable the
// software license agreement.  Do not use this software and/or documentation
// unless you have carefully read and you agree to the limited terms and
// conditions.  By using this software and/or documentation, you agree to the
// limited terms and conditions.
//-----------------------------------------------------------------------------
//! \file BDK_Task.h
//!
//! \addtogroup BDK_GRP
//! \{
//! \addtogroup SCHEDULING_GRP TASK_APP Management
//!
//! \brief Application Task management & custom event scheduling.
//!
//! Application task is used mainly to communicate with the BLE Profiles,
//! BLE stack and BLE baseband.
//!
//! There are multiple hard coded tasks within the event kernel which can send
//! messages to each other.
//! Each message is identified by:
//! * Message ID - Determines which message handler within the destination task
//!   should be called.
//! * Source Task - ID of task that sent the message.
//! * Destination Task - ID of task that will receive the message.
//!
//! \see Chapter <b>4. Event Kernel</b> of RSL10 Firmware Reference for more
//! information about Event Kernel and messages.
//! \see BLE Profile documentation for messages defined by respective BLE
//! profiles.
//!
//! \{
//-----------------------------------------------------------------------------

#ifndef BDK_TASK_H_
#define BDK_TASK_H_

#include <stdbool.h>
#include <stdint.h>

/* Load RTE configuration before anything else.
 * This header file has to be found in the global search path.
 */
#ifdef _RTE_
#include "RTE_Components.h"
#include "RTE_BDK.h"
#endif

#include <rsl10.h> /* Cannot be included before RTE_Components.h */
#include <rsl10_ke.h> /* Cannot be included before RTE_Components.h */

#ifdef __cplusplus
extern "C"
{
#endif

typedef void (*BDK_TaskCallback) (void *arg);

enum BDK_MSG_IDX
{
    BDK_DUMMY_MSG = TASK_FIRST_MSG(TASK_ID_APP),

    /** \see BDK_TaskSchedule */
    BDK_SCHEDULE_MSG,

    /** First message id value that can be used by application if it wants to
     * use event scheduler.
     *
     * \see BDK_TaskAllocateMsgId
     */
    BDK_TASK_FIRST_CUSTOM_MSG
};


/** \brief Initializes Application Task kernel structures.
 *
 * After this function completes the Application Task is in initialization
 * state.
 * In this state additional message handlers can be added to application task
 * by using \ref BDK_TaskAddMsgHandler.
 * These handlers are used primarily for communication between BLE profile
 * libraries, BLE stack and BLE Baseband.
 *
 * This function is safe to call repeatedly.
 */
extern void BDK_TaskInit(void);

/** \brief Adds new message handler to application task.
 *
 * \pre
 * New message handlers can be added only after calling BDK_TaskInit and before
 * calling either BDK_TaskStart or BDK_Schedule.
 *
 * \param id
 * Message ID of this message handler.
 *
 * \param func
 * Handler to be called when application task receives message with ID \p id.
 */
extern void BDK_TaskAddMsgHandler(ke_msg_id_t id, ke_msg_func_t func);

/** \brief Starts Application task and registers all its message handlers.
 *
 * Application task cannot be modified after this.
 *
 * It is safe to call this function multiple times.
 */
extern void BDK_TaskStart(void);

/** \brief Allocates an message ID for a custom message handler.
 *
 * \returns Unique message id.
 */
extern ke_msg_id_t BDK_TaskAllocateMsgId(void);

/** \brief Allows for an callback to be executed by Event Kernel.
 *
 * <b>Example:</b><br>
 * This example waits for an interrupt to be generated by pressing BDK button.
 * The action is then scheduled to be executed in the main loop instead of in
 * the ISR which gives it more options and time for processing of the event.
 * \include task_schedule_example.c
 *
 * \param cb
 * Callback to be executed.
 *
 * \param arg
 * Opaque pointer to pass argument to callback.
 */
extern void BDK_TaskSchedule(BDK_TaskCallback cb, void *arg);

#ifdef __cplusplus
}
#endif

#endif /* BDK_TASK_H_ */

//! \}
//! \}
